 public void addStock() throws IOException
    {
        String input, temp[];
        int stockID = 0, quan = 0;
        boolean converted = false;

        print("Please enter the stock update (<Stock ID> <Quantity Added>): ", false);
        input = System.console().readLine();
        temp = input.split(" ");
        try
        {
            stockID = Integer.parseInt(temp[0]);
            quan = Integer.parseInt(temp[1]);
            converted = true;
        } catch (NumberFormatException e)
        {
            e.printStackTrace();
        }
        if (converted)
        {
            // This is for-each loop, it iterates on the stock arraylist using a stock object("s" in this case) as a placeholder
            for (Stock s : stock)
                if (s.getStockNum() == stockID)
                {
                    s.setQuantity(s.getQuantity() + quan);
                }
        }
    }

    public void viewStock() throws IOException
    {
        String input, temp[];
        int stockID = 0;
        boolean converted = false;

        print("View all stock: ", false);
        input = System.console().readLine().toLowerCase();
        if (input.contains("y"))
        {
            print("Stock ID\tStock Name\tPrice", true);
            for (Stock s : stock)
                print(s.getStockNum() + "\t" + s.getName() + "\t" + s.getPrice(), true);
        } else
        {
            print("Which stock item would you like to view: ", false);
            input = System.console().readLine();
            try
            {
                stockID = Integer.parseInt(input);
                converted = true;
            } catch (NumberFormatException e)
                 {
                     e.printStackTrace();
                 }
                 if (converted) for (Stock s : stock)
                     if (s.getStockNum() == stockID) print("Name: " + s.getName() + ", Price: " + s.getPrice(), true);
             }
         }

    public void doSale() throws IOException
    {
        String input;
        String[] temp;
        int num, quan;
        float price = 0.00f;
        String name = "";
        Boolean sale = false;
        System.out.print("Please enter sale details(ProductCode Quantity):");
        input = System.console().readLine();
        temp = input.split(" ");
        num = Integer.parseInt(temp[0]);
        quan = Integer.parseInt(temp[1]);

        for (int i = 0; i < stock.size(); i++)
            if (stock.get(i).getStockNum() == num && stock.get(i).getQuantity() >= quan)
            {
                price = stock.get(i).getPrice();
                name = stock.get(i).getName();
                sale = true;
            }
        if (sale)
        {
            invoice(num, name, quan, price);
        }
    }

    private void invoice(int stockNum, String name, int quantity, float price) throws IOException
    {
        File invoices = new File("res\\invoices.txt");
        if (!invoices.exists())
            invoices.createNewFile();
        printToFile(invoices, "Sale Invoice\t" + currentDate() + "\n" + stockNum + "\t" + quantity);
        String rec = "res\\" + userID +"_" + stockNum + "_" + quantity;
        File receipt = new File("rec");
        receipt.createNewFile();
        printToFile(receipt, userID +"," + stockNum + "," + quantity + "," + currentDate());
    }

    private String currentDate()
    {
        DateFormat dateformat = new SimpleDateFormat("HH:mm:ss dd/MM/yyyy");
        Date currentDate = new Date();
        return dateformat.format(currentDate);
    }

    private void printToFile(File aFile, String output) throws IOException
    {
        FileWriter fw = new FileWriter(aFile, true);
        BufferedWriter bw = new BufferedWriter(fw);
        bw.write(output);
        bw.close();
        fw.close();
        return true;
    }

    private void print(Object input, Boolean nxtLn)
    {
        if (nxtLn) System.out.println(input);
        else System.out.print(input);
    }

    private void fillArray() throws IOException
    {
        Employee a;
        Stock b;
        String elements[];
        String aLineFromFile;
        File aFile = new File("res\\employee.txt");
        if (!aFile.exists()) aFile.createNewFile();
        Scanner in = new Scanner(aFile);
        while (in.hasNext())
        {
            aLineFromFile = in.nextLine();
            elements = aLineFromFile.split(",");
            a = new Employee(Integer.parseInt(elements[0]), elements[1], elements[2]);
            employee.add(a);
        }
        elements = null;
        aLineFromFile = "";
        aFile = new File("res\\Stock.txt");
        if (!aFile.exists()) aFile.createNewFile();
        in = new Scanner(aFile);
        while (in.hasNext())
        {
            aLineFromFile = in.nextLine();
            elements = aLineFromFile.split(",");
            b = new Stock(Integer.parseInt(elements[0]), elements[1], Integer.parseInt(elements[2]), Float.parseFloat(elements[3]));
            stock.add(b);
        }

    }

    public static void main(String[] args) throws IOException {
        WarehouseProject a = new WarehouseProject();
    }
    private void login() throws IOException {
        String input;
        String pattern = "[0-9]+";
        int id = 0;
        boolean checker = true, stop = true;
        Scanner in = new Scanner(System.in);
        while(checker) {
            String outMessage = "Please enter your employee ID please: ";
            print(outMessage, true);
            input = in.nextLine();
            if (!input.matches(pattern))
                print("incorrect input or ID not recognised. Please try again", true);
            else {
                id = Integer.parseInt(input);
                for (int x = 0; x < employee.size() && stop; x++) {
                    if (id == employee.get(x).getEmpno())
                    {
                        print("Enter your password", true);
                        input = in.nextLine();
                        if (input.matches(employee.get(x).getPassword()))
                        {
                            print("Login was Successful", true);
                            stop = false;
                            checker = false;
                            Menu();
                        }
                        else
                            print("Login was not successful please start again", true);
                    }
                    else if (x == employee.size())
                        print("That ID was not found, Please try again", true);
                }
            }
        }
    }
    private void Menu() throws IOException {
        String input, pattern = "[1-3]";
        int x;
        boolean checker = true;
        Scanner in = new Scanner(System.in);
        while(checker) {
            String menuMessage = "Choose an option(please enter in the format of 1-3):\n1: Update Stock\n2: Sales\n3: Logout";
            print(menuMessage, true);
            input = in.nextLine();
            if (input.matches(pattern)) {
                x = Integer.parseInt(input);
                switch (x){
                    case 1: print("Will implement a menu, methods are done", true);
                        checker = false;
                        break;
                    case 2: doSale();
                        checker = false;
                        break;
                    case 3: login();
                        checker = false;
                        break;
                }
            } else
                print("incorrect input", true);
        }



    }
//talk shit get wrecked

        panel = new JPanel();
        panel.setPreferredSize(new Dimension(800,400));
        panel1 = new JPanel();
        panel1.setPreferredSize(new Dimension(800,200));
        layout = new GridBagLayout();
        gbc = new GridBagConstraints();
        //Creating constraints and setting anchor and weight
        //gbc.anchor = GridBagConstraints.FIRST_LINE_START;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(5,5,5,5);
        layout.rowHeights = new int[] {200,200,200,200,200};
        layout.columnWidths = new int[] {100,100,100,100};
        setLayout(layout);

        stock = new JLabel("Please enter stock Item: ");
        stock.setFont(new Font("", Font.PLAIN, 12));
        sName = new JTextField(15);
        quantity = new JLabel("Enter Quantity: ");
        quantity.setFont(new Font("", Font.PLAIN, 12));
        quan = new JTextField(15);
        addToCart = new JButton("Add To Cart");
        addToCart.setFont(new Font("", Font.PLAIN, 12));
        checkout = new JButton("Check Out");
        checkout.setFont(new Font("", Font.PLAIN, 12));
        remove = new JButton("Remove Item from cart");
        remove.setFont(new Font("", Font.PLAIN, 12));
        cancel = new JButton("Cancel");
        cancel.setFont(new Font("", Font.PLAIN, 12));
        lMessage = new JLabel("");
        euro = new JLabel("euro: ");
        runningTotal = new JLabel("N/A");
        shoppinglist = new JTextArea();
        shoppinglist.setEditable(false);
        //Add the stock label to panel
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridheight = 1;
        gbc.gridwidth = 2;
        panel.add(stock , gbc);
        //Add the sName textfield to panel
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridheight = 1;
        gbc.gridwidth = 2;
        panel.add(sName , gbc);
        //Add the quantity label to panel
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridheight = 1;
        gbc.gridwidth = 1;
        panel.add(quantity , gbc);
        //Add the quan textfiend to panel
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.gridheight = 1;
        gbc.gridwidth = 2;
        panel.add(quan , gbc);
        //Add the addToCart button to panel
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridheight = 1;
        gbc.gridwidth = 1;
        panel.add(addToCart , gbc);
        //Add the checkout button to panel
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridheight = 1;
        gbc.gridwidth = 1;
        panel.add(checkout , gbc);
        //Add the remove button to panel
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.gridheight = 1;
        gbc.gridwidth = 1;
        panel.add(remove , gbc);
        //Add the cancel button to panel
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.gridheight = 1;
        gbc.gridwidth = 1;
        panel.add(cancel , gbc);
        //Add the lMessage textfield to panel
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.gridheight = 1;
        gbc.gridwidth = 4;
        panel.add(lMessage , gbc);
        //Add the euro textfield to panel
        gbc.gridx = 5;
        gbc.gridy = 2;
        gbc.gridheight = 1;
        gbc.gridwidth = 2;
        panel1.add(euro , gbc);
        //Add the runningTotal textfiend to panel
        gbc.gridx = 5;
        gbc.gridy = 1;
        gbc.gridheight = 1;
        gbc.gridwidth = 2;
        panel1.add(runningTotal , gbc);
        //Add the shoppingList textarea to panel
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 5;
        gbc.gridheight = 3;
        panel1.add(shoppinglist , gbc);

        //Add panel to Frame
        //this.getContentPane().add(BorderLayout.WEST, panel);
        //this.getContentPane().add(BorderLayout.EAST, panel1);
        this.setLayout(new GridLayout(1,2));
        this.add(panel);
        this.add(panel1);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setTitle("Cart");
        this.setResizable(false);
        this.setVisible(true);
        this.setSize(800,600);

        addToCart.addActionListener(this);
        checkout.addActionListener(this);
        remove.addActionListener(this);
        cancel.addActionListener(this);